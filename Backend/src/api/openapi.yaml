openapi: 3.0.0
info:
  title: Adressbuch
  version: '1.0'
  description: 'Die Adressbuch-Anwendung aus der Vorlesung besteht aus einer Single Page App im Frontend und einem REST-Webservice im Backend. Diese API-Spezifikation beschreibt den Backend-Webservice, der im Grunde genommen nichts anderes macht, als Adressen in einer Datenbank zu verwalten.'
  contact:
    name: Dennis Schulmeister-Zimolong
    url: 'https://www.wpvs.de'
    email: dhbw@windows3.de
  license:
    name: CC-BY-4.0
servers:
  - url: 'http://localhost:3000'
    description: Lokale Entwicklung
  - url: 'https://api.my-addressbook.com'
    description: Produktion
  - url: 'https://test-api.my-addressbook.com'
    description: Demozugang
paths:
  /:
    get:
      summary: Wurzeladresse des Webservices
      tags:
        - Start
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HATEOAS_Collection'
      operationId: get
      description: HATEOAS-Verlinkgen auf die einzelnen Collections (Listen mit Daten) des Webservices liefern
  ########## ABRUF DER OPENAPI.YAML ###################
  /openapi.yaml:
    get:
      summary: OpenAPI-Spezifikation des Webservices
      tags:
        - Start
      responses:
        '200':
          description: OK
  ###################################################
  /address:
    get:
      summary: Adressliste durchsuchen
      tags:
        - Adressliste
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
      operationId: get-address
      description: Adressen suchen. Für die Suche können über die URL verschiedene Suchparameter wie der Vorname oder Nachname mitgegeben werden. Als Antwort wird immer eine Liste mit den gefundenen Adressen geliefert.
      parameters:
        - schema:
            type: string
          in: query
          name: first_name
          description: Gesuchter Vorname
        - schema:
            type: string
          in: query
          name: last_name
          description: Gesuchter Nachname
        - schema:
            type: string
          in: query
          name: phone
          description: Gesuchte Telefonnummer
        - schema:
            type: string
          in: query
          name: email
          description: Gesuchte E-Mailadresse
    post:
      summary: Neue Adresse anlegen
      tags:
        - Adressliste
      responses:
        '201':
          description: Created
          #### WARNING ######
          headers:
            location:
              schema:
                type: string
          ###################
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      operationId: post-address
      description: 'Eine neue Adresse anlegen. Hierzu muss ein vollständiges Adressobjekt mit mindestens dem Vornamen und Nachnamen an den Server geschickt werden. Die ID wird beim Speichern von der Datenbank vergeben und kann deshalb vom Client nicht selbst gewählt werden. Ist sie in der Anfrage enthalten, wird sie vom Server ignoriert.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
  '/address/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Adresse lesen
      tags:
        - Adresse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Not Found
      operationId: get-address-id
      description: Details zu einer einzelnen Adresse ermitteln.
    put:
      summary: Adresse überschreiben
      tags:
        - Adresse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Not Found
      operationId: put-address-id
      description: 'Daten eines Adressbucheintrags überschrieben. Bei einer PUT-Anfrage muss hierfür der vollständige Datensatz an den Server geschickt werden, inklusive der Felder, die nicht geändert werden sollen. Die ID kann als einziges Feld nicht geändert werden. Sie wird aus der URL übernommen und im Request Body vom Server ignoriert.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        description: ''
    patch:
      summary: Einzelnes Feld ändern
      tags:
        - Adresse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Not Found
      operationId: patch-address-id
      description: 'Einzelne Felder eines Adressbucheintrags überschrieben. Bei einer PATCH-Anfrage müssen hierfür nur die Felder an den Server geschickt werden, die tatsächlich geändert werden sollen. Die ID kann als einziges Feld nicht geändert werden. Sie wird aus der URL übernommen und im Request Body vom Server ignoriert.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
    delete:
      summary: Adresse löschen
      tags:
        - Adresse
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      operationId: delete-address-id
      description: Adressbucheintrag löschen
components:
  schemas:
    Address:
      title: Address
      type: object
      description: 'Ein Eintrag im Adressbuch, bestehend aus Vorname, Nachname, Telefonnumer und E-Mailadresse. Die ID wird von der Datenbank generiert und kann nachträglich nicht mehr verändert werden.'
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        email:
          type: string
    HATEOAS_Collection:
      title: HATEOAS_Collection
      type: object
      description: HATEOAS-Verlinkung zu einer einzelnen Collection (Liste von Daten) des Webservices.
      properties:
        _name:
          type: string
        query:
          $ref: '#/components/schemas/HATEOAS_Link'
        create:
          $ref: '#/components/schemas/HATEOAS_Link'
    HATEOAS_Resource:
      title: HATEOAS_Resource
      type: object
      description: 'HATEOAS-Verlinkungen zu einem einzelnen Datensatz / Adressbucheintrag. Definiert, wie der Eintrag gelesen, aktualisiert, gepatcht oder gelöscht werden kann.'
      properties:
        read:
          $ref: '#/components/schemas/HATEOAS_Link'
        update:
          $ref: '#/components/schemas/HATEOAS_Link'
        patch:
          $ref: '#/components/schemas/HATEOAS_Link'
        delete:
          $ref: '#/components/schemas/HATEOAS_Link'
    HATEOAS_Link:
      title: HATEOAS_Link
      type: object
      description: 'Eine einzelner HATEOAS-Verlinkung innerhalb des Webservices. Definiert die Adresse, URL und Query Parameter zum Aufruf der jeweiligen Aktion.'
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string
tags:
  - name: Adresse
  - name: Adressliste
  - name: Start
